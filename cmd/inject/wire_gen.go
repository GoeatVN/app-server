// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"app-server/internal/domain/entity"
	"app-server/internal/infrastructure/config"
	"app-server/internal/infrastructure/database"
	"app-server/internal/infrastructure/server"
	"app-server/internal/interface/api/handler/v1"
	"app-server/internal/persistence/repository"
	"app-server/internal/persistence/repository/postgres"
	"app-server/internal/usecase/account"
	"app-server/internal/usecase/auth"
	"app-server/internal/usecase/user"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeServer sẽ inject tất cả các dependencies và trả về Server
func InitializeServer(config2 *config.Config) (*server.HTTPServer, error) {
	db, err := database.Connect(config2)
	if err != nil {
		return nil, err
	}
	userRepository := postgres.NewUserRepository(db)
	serviceInterface := user.NewService(userRepository)
	userHandler := v1.NewUserHandler(serviceInterface)
	genericBaseRepository := provideGenericBaseRepository(db)
	authServiceInterface := auth.NewAuthService(config2)
	accountServiceInterface := account.NewAccountService(userRepository, genericBaseRepository, authServiceInterface)
	accountHandler := v1.NewAccountHandler(accountServiceInterface)
	httpServer := server.NewHTTPServer(config2, userHandler, accountHandler, authServiceInterface)
	return httpServer, nil
}

// wire.go:

// create provider function for GenericBaseRepository
// provideGenericBaseRepository sẽ inject database connection và trả về GenericBaseRepository
func provideGenericBaseRepository(db *gorm.DB) *repository.GenericBaseRepository[entity.UserRole] {
	return repository.NewGenericBaseRepository[entity.UserRole](db)
}
